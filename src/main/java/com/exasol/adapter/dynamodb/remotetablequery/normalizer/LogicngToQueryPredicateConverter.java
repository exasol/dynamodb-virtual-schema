package com.exasol.adapter.dynamodb.remotetablequery.normalizer;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.logicng.formulas.Formula;
import org.logicng.formulas.Variable;

import com.exasol.adapter.dynamodb.remotetablequery.LogicalOperator;
import com.exasol.adapter.dynamodb.remotetablequery.NoPredicate;
import com.exasol.adapter.dynamodb.remotetablequery.QueryPredicate;

/**
 * This class converts LogicNG {@link Formula}s to {@link QueryPredicate} structures.
 */
@java.lang.SuppressWarnings("squid:S119") // DocumentVisitorType does not fit naming conventions.
class LogicngToQueryPredicateConverter<DocumentVisitorType> {
    private final Map<Variable, QueryPredicate<DocumentVisitorType>> variablesMapping;

    /**
     * Create an instance of {@link LogicngToQueryPredicateConverter}.
     * 
     * @param variablesMapping variable map generated by {@link QueryPredicateToLogicngConverter}.
     */
    public LogicngToQueryPredicateConverter(final Map<Variable, QueryPredicate<DocumentVisitorType>> variablesMapping) {
        this.variablesMapping = variablesMapping;
    }

    /**
     * Converts LogicNG {@link Formula}s to {@link QueryPredicate} structures.
     * 
     * @param formula LogicNG formula
     * @return {@link QueryPredicate} structure
     */
    public QueryPredicate<DocumentVisitorType> convert(final Formula formula) {
        switch (formula.type()) {
        case AND:
            return convertLogicOperator(LogicalOperator.Operator.AND, formula);
        case OR:
            return convertLogicOperator(LogicalOperator.Operator.OR, formula);
        case TRUE:
            return new NoPredicate<>();
        case LITERAL:
            return this.variablesMapping.get(formula);
        default:
            throw new UnsupportedOperationException("This formular type has no corresponding QueryPredicate.");
        }
    }

    private LogicalOperator<DocumentVisitorType> convertLogicOperator(final LogicalOperator.Operator operator,
            final Formula formula) {
        final List<QueryPredicate<DocumentVisitorType>> operands = StreamSupport.stream(formula.spliterator(), false)
                .map(this::convert).collect(Collectors.toList());
        return new LogicalOperator<>(operands, operator);
    }
}
